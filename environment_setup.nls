;; netlogo code to define the map environment



breed [waypoints waypoint]  ; objects to represent navigation waypoints
waypoints-own [
  waypoint-number
]

breed [mines mine]  ; mine agents
mines-own [
  target-strength-coefficient
]

breed [obstacles obstacle]  ;; agent representing an obstacle
obstacles-own [
  target-strength-coefficient
]



globals [
  nav-vector-data
  object-position-data
  waypoint-data
  minefield-data
]


to setup-world [file-name]
  ; programmatically resize the world based on the mission profile
  
  ifelse ( file-exists? file-name) [
    file-open file-name
    while [ not file-at-end? ] [
      resize-world file-read file-read file-read file-read
      set-patch-size 0.2
    ]
   file-close
  ] [
   resize-world 0 99 0 99
  ]
end 

to load-vector-data [file-name]

  ; We check to make sure the file exists first
  ifelse ( file-exists? file-name)
  [
    ; We are saving the data into a list, so it only needs to be loaded once.
    set nav-vector-data []

    ; This opens the file, so we can use it.
    file-open file-name

    ; Read in all the data in the file
    while [ not file-at-end? ]
    [
      ; file-read gives you variables.  In this case numbers.
      ; We store them in a double list (ex [[1 1 9.9999] [1 2 9.9999] ...
      ; Each iteration we append the next three-tuple to the current list
      set nav-vector-data sentence nav-vector-data (list (list file-read file-read file-read file-read))
    ]

    ; user-message "Navigation loading complete!"

    ; Done reading in patch information.  Close the file.
    file-close
  ]
  [ user-message "Navigation file does not exist in current directory!"   ]
  
  ;; define the mission vector field from the loaded data
  ifelse ( is-list? nav-vector-data )
    [ foreach nav-vector-data [ four-tuple -> ask patch first four-tuple item 1 four-tuple [ set behavior_x item 2 four-tuple set behavior_y item 3 four-tuple]]]
    [ user-message "You need to load in patch data first!" ]
  display
  
end


to place-objects-from-file [objs-file]
  ;; read a file with the location of objects in the environment
  ; We check to make sure the file exists first
  ifelse ( file-exists? objs-file )
  [
    ; We are saving the data into a list, so it only needs to be loaded once.
    set object-position-data []

    ; This opens the file, so we can use it.
    file-open objs-file

    ; Read in all the data in the file
    while [ not file-at-end? ]
    [

      set object-position-data sentence object-position-data (list (list file-read file-read))
    ]

    ;user-message "Obstacle file loading complete!"

    ; Done reading in patch information.  Close the file.
    file-close
  ]
  [ user-message "Obstacle file does not exist in current directory!" ]
  
  ifelse ( is-list? object-position-data )
    [ foreach object-position-data [obs-coords -> create-obstacles 1 [
      setxy first obs-coords last obs-coords
      set shape "rock"
      set size 3
      set color gray
  ] ] ]
    [ user-message "You need to load in obstacle data first!" ]
  
end

to place-random-objects [ number_of_objects xmin ymin xmax ymax ]
  create-obstacles number_of_objects [
    setxy (xmin + (random-float (xmax - xmin))) (ymin + (random-float (ymax - xmin)))
    set shape "rock"
    set size 5
    set color gray
  ]
end

to load-mission-waypoints [waypoints-file]
   ;; read a file with the location of waypoints
  ; We check to make sure the file exists first
  ifelse ( file-exists? waypoints-file )
  [
    ; We are saving the data into a list, so it only needs to be loaded once.
    set waypoint-data []

    ; This opens the file, so we can use it.
    file-open waypoints-file

    ; Read in all the data in the file
    while [ not file-at-end? ]
    [

      set waypoint-data sentence waypoint-data (list (list file-read file-read file-read file-read))  ; leg-number x-coord y-coord z-coord
    ]

    ;user-message "Waypoint file loading complete!"

    ; Done reading in patch information.  Close the file.
    file-close
  ]
  [ user-message "Waypoint file does not exist in current directory!" ]
  
  ifelse ( is-list? waypoint-data )
    [ foreach waypoint-data [waypoint-coords -> create-waypoints 1 [
      setxy item 1 waypoint-coords item 2 waypoint-coords
      set waypoint-number item 0 waypoint-coords 
      set shape "triangle 2"
      set color blue] ]
  ]
    [ user-message "You need to load in waypoint data first!" ]
  
end

to lay-random-mines [number_of_mines xmin ymin xmax ymax ]
  ; lay a number_of_mines mines randomly in the box between (xmin, ymin) and (xmax, ymax)
  create-mines number_of_mines [
    setxy (xmin + (random-float (xmax - xmin))) (ymin + (random-float (ymax - xmin)))
    set shape "target"
    set color orange
  ]  ; place the mines randomly
end


to lay-mines-from-file [minefield-file]
  ; We check to make sure the file exists first
  ifelse ( file-exists? minefield-file )
  [
    ; We are saving the data into a list, so it only needs to be loaded once.
    set minefield-data []

    ; This opens the file, so we can use it.
    file-open minefield-file

    ; Read in all the data in the file
    while [ not file-at-end? ]
    [

      set minefield-data sentence minefield-data (list (list file-read file-read))  ; x-coord y-coord
    ]

    ;user-message "Minefield file loading complete!"

    ; Done reading in patch information.  Close the file.
    file-close
  ]
  [ user-message "Minefield file does not exist in current directory!" ]
  
  ifelse ( is-list? minefield-data )
    [ foreach minefield-data [mine-coords -> create-mines 1 [
      setxy item 0 mine-coords item 1 mine-coords
      set shape "target"
      set color orange] ]
  ]
    [ user-message "You need to load minefield data first!" ]
  
end

to setup-mission-plan
  ;; read a file that defines the objective potential field
  ;; https://github.com/NetLogo/models/blob/master/Code%20Examples/File%20Input%20Example.nlogo
end

to setup-currents
  ;; read a file that defines the currents in the environment
end
